apiVersion: apps/v1
kind: Deployment
metadata: # pod 的元数据，就是标签，注解，名称
  name: goorigin # pod 名
  labels:
    app: goorigin  # k get po --all-namespaces --selector app=demo
    env: debug  # k get deploy --all-namespaces -l app=demo,env=debug
spec: # pod 的规格，也就是内部容器中的详细定义
  replicas: 1
  selector:
    matchLabels:
      app: go-origin
  template: # 容器模板 也就是生成的pod的定义； rc 会以此模板来创建pod
    metadata:
      labels:
        app: go-origin
    spec:
      nodeSelector: # 指定我们的容器调度到 master=ian 的这个node上
        master: ian
      containers:
        - name: go-ori
          image: ianleto/goorigin:079597f
          imagePullPolicy: IfNotPresent # 如果这个image 不存在本地则拉取
#          imagePullPolicy: Never
#          livenessProbe: # 存活探针
#            httpGet: # 心跳方式为http
#              path: /ping
#              port: 8008
          ports:
            - name: init   # 这里的名字要和svc 中服务中的名字对照上
              containerPort: 8008
            - name: dlv
              containerPort: 2345
          volumeMounts: # 我们建立了一个挂载vol 与该容器共生
            - mountPath: root/config #
              name: goorigin # 告诉我们要挂载叫goroign 的vol 与下面的vol 呼应
              readOnly: true
          env: # 增加环境变量
            - name : mode
              value: k8s
            - name : user
              value: ian
      volumes: # vol数据卷
        - name: goorigin # 这个vol 的名字叫goorigin
          configMap: # 意味着这个vol的数据是从一个configmap导入的
            name: goorigin # 这个configmap 叫goorign
            items:
              - key: config.yaml
                path: config.yaml
